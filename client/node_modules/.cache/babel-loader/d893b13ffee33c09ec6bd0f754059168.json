{"ast":null,"code":"var _jsxFileName = \"/home/jackgkk/UL/LicenceProject/SpotifyAnalysis/client/src/Pages/ListPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport TrackCard from '../../Components/TrackCard';\nimport './index.scss';\nimport Line from \"../../assets/yellowLine.svg\";\nimport ArtistCard from '../../Components/ArtistCard';\nimport { useHistory } from 'react-router';\nimport apiMethods from '../../api/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isTrack = x => x.type === 'tracks';\n\nconst isArtist = x => x.type === 'artists';\n\nexport default function ListPage({\n  listItems,\n  token,\n  fetchRefreshToken\n}) {\n  _s();\n\n  const history = useHistory();\n  const [timeRange, setTimeRange] = React.useState('short_term');\n  React.useEffect(() => {\n    if (token) {\n      apiMethods.fetchTopItems(timeRange, token, 'tracks').then(res => handleErrors(res)).then(res => {\n        console.log(res);\n      }).catch(err => console.error(err));\n    } else history.push('/');\n  }, []);\n\n  function handleErrors(res) {\n    if (!res.ok) {\n      console.log(res);\n\n      if (res.status === 401) {\n        res.json().then(res => {\n          if (res.message === 'invalid token') fetchRefreshToken();\n        });\n      } else {\n        console.error('Error while fetching list data');\n      }\n    } else return res.json();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"headerDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"underlineText\",\n        children: [\"List of \", isTrack(listItems[0]) ? 'Tracks' : 'Artists', /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Line,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), isTrack(listItems[0]) ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Tracks that were popular among your ears in the last:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Artists you couldn\\u2019t get enough of in the last:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"switchBtns\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"switchButton\",\n          children: \"1 month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"switchButton\",\n          children: \"6 months\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"switchButton\",\n          children: \"All time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listWrap\",\n      children: listItems.map(e => {\n        if (isTrack(e)) {\n          return /*#__PURE__*/_jsxDEV(TrackCard, {\n            track: e\n          }, Math.random(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 20\n          }, this);\n        } else if (isArtist(e)) {\n          return /*#__PURE__*/_jsxDEV(ArtistCard, {\n            artist: e\n          }, Math.random(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 20\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Error Happened\"\n        }, \"1\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListPage, \"6iWX8CZW6fS4UjGAPqVVhJezfTU=\", false, function () {\n  return [useHistory];\n});\n\n_c = ListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"sources":["/home/jackgkk/UL/LicenceProject/SpotifyAnalysis/client/src/Pages/ListPage/index.tsx"],"names":["React","TrackCard","ArtistCard","useHistory","apiMethods","isTrack","x","type","isArtist","ListPage","listItems","token","fetchRefreshToken","history","timeRange","setTimeRange","useState","useEffect","fetchTopItems","then","res","handleErrors","console","log","catch","err","error","push","ok","status","json","message","Line","map","e","Math","random"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA,OAAO,cAAP;;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,SAASC,UAAT,QAAwC,cAAxC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;;;AAQA,MAAMC,OAAO,GAAIC,CAAD,IAA4BA,CAAC,CAACC,IAAF,KAAW,QAAvD;;AACA,MAAMC,QAAQ,GAAIF,CAAD,IAA6BA,CAAC,CAACC,IAAF,KAAW,SAAzD;;AAEA,eAAe,SAASE,QAAT,CAAmB;AAChCC,EAAAA,SADgC;AAEhCC,EAAAA,KAFgC;AAGhCC,EAAAA;AAHgC,CAAnB,EAIG;AAAA;;AAChB,QAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4Bf,KAAK,CAACgB,QAAN,CAAe,YAAf,CAAlC;AAEAhB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIN,KAAJ,EAAW;AACTP,MAAAA,UAAU,CACPc,aADH,CACiBJ,SADjB,EAC4BH,KAD5B,EACmC,QADnC,EAEGQ,IAFH,CAEQC,GAAG,IAAIC,YAAY,CAACD,GAAD,CAF3B,EAGGD,IAHH,CAGQC,GAAG,IAAI;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,OALH,EAMGI,KANH,CAMSC,GAAG,IAAIH,OAAO,CAACI,KAAR,CAAcD,GAAd,CANhB;AAOD,KARD,MAQOZ,OAAO,CAACc,IAAR,CAAa,GAAb;AACR,GAVD,EAUG,EAVH;;AAYA,WAASN,YAAT,CAAuBD,GAAvB,EAAiC;AAC/B,QAAI,CAACA,GAAG,CAACQ,EAAT,EAAa;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,UAAIA,GAAG,CAACS,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,GAAG,CAACU,IAAJ,GAAWX,IAAX,CAAgBC,GAAG,IAAI;AACrB,cAAIA,GAAG,CAACW,OAAJ,KAAgB,eAApB,EAAqCnB,iBAAiB;AACvD,SAFD;AAGD,OAJD,MAIO;AACLU,QAAAA,OAAO,CAACI,KAAR,CAAc,gCAAd;AACD;AACF,KATD,MASO,OAAON,GAAG,CAACU,IAAJ,EAAP;AACR;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,EAAE,EAAC,eAAP;AAAA,+BACWzB,OAAO,CAACK,SAAS,CAAC,CAAD,CAAV,CAAP,GAAwB,QAAxB,GAAmC,SAD9C,eAEE;AAAK,UAAA,GAAG,EAAEsB,IAAV;AAAgB,UAAA,GAAG,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAKG3B,OAAO,CAACK,SAAS,CAAC,CAAD,CAAV,CAAP,gBAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,gBAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAaE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,SAAS,EAAC,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAqBE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACGA,SAAS,CAACuB,GAAV,CAAcC,CAAC,IAAI;AAClB,YAAI7B,OAAO,CAAC6B,CAAD,CAAX,EAAgB;AACd,8BAAO,QAAC,SAAD;AAA+B,YAAA,KAAK,EAAEA;AAAtC,aAAgBC,IAAI,CAACC,MAAL,EAAhB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFD,MAEO,IAAI5B,QAAQ,CAAC0B,CAAD,CAAZ,EAAiB;AACtB,8BAAO,QAAC,UAAD;AAAgC,YAAA,MAAM,EAAEA;AAAxC,aAAiBC,IAAI,CAACC,MAAL,EAAjB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;;AAED,4BAAO;AAAA;AAAA,WAAS,GAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OARA;AADH;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GApEuB3B,Q;UAKNN,U;;;KALMM,Q","sourcesContent":["import * as React from 'react'\nimport TrackCard from '../../Components/TrackCard'\nimport { Artist, Track } from '../../types'\nimport './index.scss'\nimport Line from '../../assets/yellowLine.svg'\nimport ArtistCard from '../../Components/ArtistCard'\nimport { artistType, trackType } from '../../navigation'\nimport { useHistory, useLocation } from 'react-router'\nimport apiMethods from '../../api/index'\n\ninterface ListPageProps {\n  listItems: (Track | Artist)[]\n  token: String | null\n  fetchRefreshToken: () => void\n}\n\nconst isTrack = (x: any): x is trackType => x.type === 'tracks'\nconst isArtist = (x: any): x is artistType => x.type === 'artists'\n\nexport default function ListPage ({\n  listItems,\n  token,\n  fetchRefreshToken\n}: ListPageProps) {\n  const history = useHistory()\n  const [timeRange, setTimeRange] = React.useState('short_term')\n\n  React.useEffect(() => {\n    if (token) {\n      apiMethods\n        .fetchTopItems(timeRange, token, 'tracks')\n        .then(res => handleErrors(res))\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => console.error(err))\n    } else history.push('/')\n  }, [])\n\n  function handleErrors (res: any) {\n    if (!res.ok) {\n      console.log(res)\n      if (res.status === 401) {\n        res.json().then(res => {\n          if (res.message === 'invalid token') fetchRefreshToken()\n        })\n      } else {\n        console.error('Error while fetching list data')\n      }\n    } else return res.json()\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"headerDiv\">\n        <h2 id=\"underlineText\">\n          List of {isTrack(listItems[0]) ? 'Tracks' : 'Artists'}\n          <img src={Line} alt=\"\" />\n        </h2>\n        {isTrack(listItems[0])\n          ? (\n          <p>Tracks that were popular among your ears in the last:</p>\n            )\n          : (\n          <p>Artists you couldnâ€™t get enough of in the last:</p>\n            )}\n\n        <div className=\"switchBtns\">\n          <button className=\"switchButton\">1 month</button>\n          <button className=\"switchButton\">6 months</button>\n          <button className=\"switchButton\">All time</button>\n        </div>\n      </div>\n\n      <div className=\"listWrap\">\n        {listItems.map(e => {\n          if (isTrack(e)) {\n            return <TrackCard key={Math.random()} track={e} />\n          } else if (isArtist(e)) {\n            return <ArtistCard key={Math.random()} artist={e} />\n          }\n\n          return <div key=\"1\">Error Happened</div>\n        })}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}